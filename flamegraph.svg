<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="1596622"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7,859 samples, 0.49%)</title><rect x="0.0000%" y="309" width="0.4922%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7859"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,182 samples, 0.07%)</title><rect x="0.4182%" y="293" width="0.0740%" height="15" fill="rgb(217,0,24)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1,182 samples, 0.07%)</title><rect x="0.4182%" y="277" width="0.0740%" height="15" fill="rgb(221,193,54)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,182 samples, 0.07%)</title><rect x="0.4182%" y="261" width="0.0740%" height="15" fill="rgb(248,212,6)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,182 samples, 0.07%)</title><rect x="0.4182%" y="245" width="0.0740%" height="15" fill="rgb(208,68,35)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,182 samples, 0.07%)</title><rect x="0.4182%" y="229" width="0.0740%" height="15" fill="rgb(232,128,0)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,182 samples, 0.07%)</title><rect x="0.4182%" y="213" width="0.0740%" height="15" fill="rgb(207,160,47)" fg:x="6677" fg:w="1182"/><text x="0.6682%" y="223.50"></text></g><g><title>blake3::ChunkState::update (2,392 samples, 0.15%)</title><rect x="0.4961%" y="293" width="0.1498%" height="15" fill="rgb(228,23,34)" fg:x="7921" fg:w="2392"/><text x="0.7461%" y="303.50"></text></g><g><title>[[heap]] (2,471 samples, 0.15%)</title><rect x="0.4922%" y="309" width="0.1548%" height="15" fill="rgb(218,30,26)" fg:x="7859" fg:w="2471"/><text x="0.7422%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4,621 samples, 0.29%)</title><rect x="0.6470%" y="293" width="0.2894%" height="15" fill="rgb(220,122,19)" fg:x="10330" fg:w="4621"/><text x="0.8970%" y="303.50"></text></g><g><title>__GI___libc_malloc (527 samples, 0.03%)</title><rect x="0.9366%" y="293" width="0.0330%" height="15" fill="rgb(250,228,42)" fg:x="14954" fg:w="527"/><text x="1.1866%" y="303.50"></text></g><g><title>_int_free (4,689 samples, 0.29%)</title><rect x="0.9696%" y="293" width="0.2937%" height="15" fill="rgb(240,193,28)" fg:x="15481" fg:w="4689"/><text x="1.2196%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (2,220 samples, 0.14%)</title><rect x="1.4082%" y="277" width="0.1390%" height="15" fill="rgb(216,20,37)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,220 samples, 0.14%)</title><rect x="1.4082%" y="261" width="0.1390%" height="15" fill="rgb(206,188,39)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,220 samples, 0.14%)</title><rect x="1.4082%" y="245" width="0.1390%" height="15" fill="rgb(217,207,13)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,220 samples, 0.14%)</title><rect x="1.4082%" y="229" width="0.1390%" height="15" fill="rgb(231,73,38)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,220 samples, 0.14%)</title><rect x="1.4082%" y="213" width="0.1390%" height="15" fill="rgb(225,20,46)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,220 samples, 0.14%)</title><rect x="1.4082%" y="197" width="0.1390%" height="15" fill="rgb(210,31,41)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,220 samples, 0.14%)</title><rect x="1.4082%" y="181" width="0.1390%" height="15" fill="rgb(221,200,47)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2,220 samples, 0.14%)</title><rect x="1.4082%" y="165" width="0.1390%" height="15" fill="rgb(226,26,5)" fg:x="22483" fg:w="2220"/><text x="1.6582%" y="175.50"></text></g><g><title>alloc::fmt::format (6,480 samples, 0.41%)</title><rect x="1.2633%" y="293" width="0.4059%" height="15" fill="rgb(249,33,26)" fg:x="20170" fg:w="6480"/><text x="1.5133%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (1,947 samples, 0.12%)</title><rect x="1.5472%" y="277" width="0.1219%" height="15" fill="rgb(235,183,28)" fg:x="24703" fg:w="1947"/><text x="1.7972%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2,873 samples, 0.18%)</title><rect x="1.6691%" y="293" width="0.1799%" height="15" fill="rgb(221,5,38)" fg:x="26650" fg:w="2873"/><text x="1.9191%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1,998 samples, 0.13%)</title><rect x="1.8491%" y="293" width="0.1251%" height="15" fill="rgb(247,18,42)" fg:x="29523" fg:w="1998"/><text x="2.0991%" y="303.50"></text></g><g><title>[[stack]] (36,498 samples, 2.29%)</title><rect x="0.6470%" y="309" width="2.2860%" height="15" fill="rgb(241,131,45)" fg:x="10330" fg:w="36498"/><text x="0.8970%" y="319.50">[..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (15,307 samples, 0.96%)</title><rect x="1.9742%" y="293" width="0.9587%" height="15" fill="rgb(249,31,29)" fg:x="31521" fg:w="15307"/><text x="2.2242%" y="303.50"></text></g><g><title>[anon] (2,052 samples, 0.13%)</title><rect x="2.9329%" y="309" width="0.1285%" height="15" fill="rgb(225,111,53)" fg:x="46828" fg:w="2052"/><text x="3.1829%" y="319.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2,052 samples, 0.13%)</title><rect x="2.9329%" y="293" width="0.1285%" height="15" fill="rgb(238,160,17)" fg:x="46828" fg:w="2052"/><text x="3.1829%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4,148 samples, 0.26%)</title><rect x="3.0615%" y="293" width="0.2598%" height="15" fill="rgb(214,148,48)" fg:x="48880" fg:w="4148"/><text x="3.3115%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3,804 samples, 0.24%)</title><rect x="3.3340%" y="293" width="0.2383%" height="15" fill="rgb(232,36,49)" fg:x="53231" fg:w="3804"/><text x="3.5840%" y="303.50"></text></g><g><title>[rust-set-reconciliation] (8,763 samples, 0.55%)</title><rect x="3.0615%" y="309" width="0.5488%" height="15" fill="rgb(209,103,24)" fg:x="48880" fg:w="8763"/><text x="3.3115%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (608 samples, 0.04%)</title><rect x="3.5722%" y="293" width="0.0381%" height="15" fill="rgb(229,88,8)" fg:x="57035" fg:w="608"/><text x="3.8222%" y="303.50"></text></g><g><title>__GI___libc_malloc (2,092 samples, 0.13%)</title><rect x="3.6105%" y="293" width="0.1310%" height="15" fill="rgb(213,181,19)" fg:x="57646" fg:w="2092"/><text x="3.8605%" y="303.50"></text></g><g><title>__free (4,270 samples, 0.27%)</title><rect x="3.7415%" y="293" width="0.2674%" height="15" fill="rgb(254,191,54)" fg:x="59738" fg:w="4270"/><text x="3.9915%" y="303.50"></text></g><g><title>_int_free (1,705 samples, 0.11%)</title><rect x="4.0177%" y="293" width="0.1068%" height="15" fill="rgb(241,83,37)" fg:x="64147" fg:w="1705"/><text x="4.2677%" y="303.50"></text></g><g><title>alloc::fmt::format (2,127 samples, 0.13%)</title><rect x="4.1245%" y="293" width="0.1332%" height="15" fill="rgb(233,36,39)" fg:x="65852" fg:w="2127"/><text x="4.3745%" y="303.50"></text></g><g><title>blake3::Output::root_hash (2,046 samples, 0.13%)</title><rect x="4.7797%" y="277" width="0.1281%" height="15" fill="rgb(226,3,54)" fg:x="76314" fg:w="2046"/><text x="5.0297%" y="287.50"></text></g><g><title>blake3::platform::Platform::compress_in_place (2,046 samples, 0.13%)</title><rect x="4.7797%" y="261" width="0.1281%" height="15" fill="rgb(245,192,40)" fg:x="76314" fg:w="2046"/><text x="5.0297%" y="271.50"></text></g><g><title>blake3::sse41::compress_in_place (2,046 samples, 0.13%)</title><rect x="4.7797%" y="245" width="0.1281%" height="15" fill="rgb(238,167,29)" fg:x="76314" fg:w="2046"/><text x="5.0297%" y="255.50"></text></g><g><title>blake3::hash (12,378 samples, 0.78%)</title><rect x="4.2577%" y="293" width="0.7753%" height="15" fill="rgb(232,182,51)" fg:x="67979" fg:w="12378"/><text x="4.5077%" y="303.50"></text></g><g><title>blake3::hash_all_at_once (1,997 samples, 0.13%)</title><rect x="4.9079%" y="277" width="0.1251%" height="15" fill="rgb(231,60,39)" fg:x="78360" fg:w="1997"/><text x="5.1579%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1,786 samples, 0.11%)</title><rect x="5.0329%" y="293" width="0.1119%" height="15" fill="rgb(208,69,12)" fg:x="80357" fg:w="1786"/><text x="5.2829%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1,712 samples, 0.11%)</title><rect x="5.1448%" y="293" width="0.1072%" height="15" fill="rgb(235,93,37)" fg:x="82143" fg:w="1712"/><text x="5.3948%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1,672 samples, 0.10%)</title><rect x="5.1473%" y="277" width="0.1047%" height="15" fill="rgb(213,116,39)" fg:x="82183" fg:w="1672"/><text x="5.3973%" y="287.50"></text></g><g><title>core::fmt::write (14,693 samples, 0.92%)</title><rect x="5.2520%" y="293" width="0.9203%" height="15" fill="rgb(222,207,29)" fg:x="83855" fg:w="14693"/><text x="5.5020%" y="303.50"></text></g><g><title>rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash (5,239 samples, 0.33%)</title><rect x="6.7248%" y="261" width="0.3281%" height="15" fill="rgb(206,96,30)" fg:x="107369" fg:w="5239"/><text x="6.9748%" y="271.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,886 samples, 0.74%)</title><rect x="6.7248%" y="277" width="0.7444%" height="15" fill="rgb(218,138,4)" fg:x="107369" fg:w="11886"/><text x="6.9748%" y="287.50"></text></g><g><title>rust_set_reconciliation::ibf::distinct_hashes_in_range::{{closure}} (6,647 samples, 0.42%)</title><rect x="7.0529%" y="261" width="0.4163%" height="15" fill="rgb(250,191,14)" fg:x="112608" fg:w="6647"/><text x="7.3029%" y="271.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64_with_seed (6,647 samples, 0.42%)</title><rect x="7.0529%" y="245" width="0.4163%" height="15" fill="rgb(239,60,40)" fg:x="112608" fg:w="6647"/><text x="7.3029%" y="255.50"></text></g><g><title>rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash (26,388 samples, 1.65%)</title><rect x="6.1723%" y="293" width="1.6527%" height="15" fill="rgb(206,27,48)" fg:x="98548" fg:w="26388"/><text x="6.4223%" y="303.50"></text></g><g><title>rust_set_reconciliation::ibf::Cell::new (5,681 samples, 0.36%)</title><rect x="7.4692%" y="277" width="0.3558%" height="15" fill="rgb(225,35,8)" fg:x="119255" fg:w="5681"/><text x="7.7192%" y="287.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64 (5,681 samples, 0.36%)</title><rect x="7.4692%" y="261" width="0.3558%" height="15" fill="rgb(250,213,24)" fg:x="119255" fg:w="5681"/><text x="7.7192%" y="271.50"></text></g><g><title>alloc::fmt::format (2,039 samples, 0.13%)</title><rect x="8.4474%" y="229" width="0.1277%" height="15" fill="rgb(247,123,22)" fg:x="134873" fg:w="2039"/><text x="8.6974%" y="239.50"></text></g><g><title>__GI___libc_malloc (29,082 samples, 1.82%)</title><rect x="8.8404%" y="101" width="1.8215%" height="15" fill="rgb(231,138,38)" fg:x="141148" fg:w="29082"/><text x="9.0904%" y="111.50">_..</text></g><g><title>__rdl_alloc (4,004 samples, 0.25%)</title><rect x="10.6619%" y="101" width="0.2508%" height="15" fill="rgb(231,145,46)" fg:x="170230" fg:w="4004"/><text x="10.9119%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,002 samples, 0.25%)</title><rect x="10.6620%" y="85" width="0.2507%" height="15" fill="rgb(251,118,11)" fg:x="170232" fg:w="4002"/><text x="10.9120%" y="95.50"></text></g><g><title>alloc::string::String::with_capacity (39,398 samples, 2.47%)</title><rect x="8.5751%" y="229" width="2.4676%" height="15" fill="rgb(217,147,25)" fg:x="136912" fg:w="39398"/><text x="8.8251%" y="239.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37,240 samples, 2.33%)</title><rect x="8.7103%" y="213" width="2.3324%" height="15" fill="rgb(247,81,37)" fg:x="139070" fg:w="37240"/><text x="8.9603%" y="223.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37,240 samples, 2.33%)</title><rect x="8.7103%" y="197" width="2.3324%" height="15" fill="rgb(209,12,38)" fg:x="139070" fg:w="37240"/><text x="8.9603%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37,240 samples, 2.33%)</title><rect x="8.7103%" y="181" width="2.3324%" height="15" fill="rgb(227,1,9)" fg:x="139070" fg:w="37240"/><text x="8.9603%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37,240 samples, 2.33%)</title><rect x="8.7103%" y="165" width="2.3324%" height="15" fill="rgb(248,47,43)" fg:x="139070" fg:w="37240"/><text x="8.9603%" y="175.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35,163 samples, 2.20%)</title><rect x="8.8404%" y="149" width="2.2023%" height="15" fill="rgb(221,10,30)" fg:x="141147" fg:w="35163"/><text x="9.0904%" y="159.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (35,163 samples, 2.20%)</title><rect x="8.8404%" y="133" width="2.2023%" height="15" fill="rgb(210,229,1)" fg:x="141147" fg:w="35163"/><text x="9.0904%" y="143.50">a..</text></g><g><title>alloc::alloc::alloc (35,163 samples, 2.20%)</title><rect x="8.8404%" y="117" width="2.2023%" height="15" fill="rgb(222,148,37)" fg:x="141147" fg:w="35163"/><text x="9.0904%" y="127.50">a..</text></g><g><title>__rust_alloc (2,076 samples, 0.13%)</title><rect x="10.9127%" y="101" width="0.1300%" height="15" fill="rgb(234,67,33)" fg:x="174234" fg:w="2076"/><text x="11.1627%" y="111.50"></text></g><g><title>alloc::fmt::format (2,003 samples, 0.13%)</title><rect x="11.0504%" y="165" width="0.1255%" height="15" fill="rgb(247,98,35)" fg:x="176433" fg:w="2003"/><text x="11.3004%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,981 samples, 0.25%)</title><rect x="11.1758%" y="149" width="0.2493%" height="15" fill="rgb(247,138,52)" fg:x="178436" fg:w="3981"/><text x="11.4258%" y="159.50"></text></g><g><title>alloc::fmt::format (1,983 samples, 0.12%)</title><rect x="11.4252%" y="149" width="0.1242%" height="15" fill="rgb(213,79,30)" fg:x="182417" fg:w="1983"/><text x="11.6752%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (8,436 samples, 0.53%)</title><rect x="11.0504%" y="213" width="0.5284%" height="15" fill="rgb(246,177,23)" fg:x="176433" fg:w="8436"/><text x="11.3004%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (8,436 samples, 0.53%)</title><rect x="11.0504%" y="197" width="0.5284%" height="15" fill="rgb(230,62,27)" fg:x="176433" fg:w="8436"/><text x="11.3004%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,436 samples, 0.53%)</title><rect x="11.0504%" y="181" width="0.5284%" height="15" fill="rgb(216,154,8)" fg:x="176433" fg:w="8436"/><text x="11.3004%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6,433 samples, 0.40%)</title><rect x="11.1758%" y="165" width="0.4029%" height="15" fill="rgb(244,35,45)" fg:x="178436" fg:w="6433"/><text x="11.4258%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (469 samples, 0.03%)</title><rect x="11.5494%" y="149" width="0.0294%" height="15" fill="rgb(251,115,12)" fg:x="184400" fg:w="469"/><text x="11.7994%" y="159.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (469 samples, 0.03%)</title><rect x="11.5494%" y="133" width="0.0294%" height="15" fill="rgb(240,54,50)" fg:x="184400" fg:w="469"/><text x="11.7994%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1,899 samples, 0.12%)</title><rect x="11.5788%" y="213" width="0.1189%" height="15" fill="rgb(233,84,52)" fg:x="184870" fg:w="1899"/><text x="11.8288%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (166 samples, 0.01%)</title><rect x="11.6978%" y="213" width="0.0104%" height="15" fill="rgb(207,117,47)" fg:x="186769" fg:w="166"/><text x="11.9478%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (166 samples, 0.01%)</title><rect x="11.6978%" y="197" width="0.0104%" height="15" fill="rgb(249,43,39)" fg:x="186769" fg:w="166"/><text x="11.9478%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (166 samples, 0.01%)</title><rect x="11.6978%" y="181" width="0.0104%" height="15" fill="rgb(209,38,44)" fg:x="186769" fg:w="166"/><text x="11.9478%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (166 samples, 0.01%)</title><rect x="11.6978%" y="165" width="0.0104%" height="15" fill="rgb(236,212,23)" fg:x="186769" fg:w="166"/><text x="11.9478%" y="175.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (10,720 samples, 0.67%)</title><rect x="11.0427%" y="229" width="0.6714%" height="15" fill="rgb(242,79,21)" fg:x="176310" fg:w="10720"/><text x="11.2927%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (737 samples, 0.05%)</title><rect x="13.2703%" y="117" width="0.0462%" height="15" fill="rgb(211,96,35)" fg:x="211877" fg:w="737"/><text x="13.5203%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5,940 samples, 0.37%)</title><rect x="13.3603%" y="101" width="0.3720%" height="15" fill="rgb(253,215,40)" fg:x="213314" fg:w="5940"/><text x="13.6103%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5,883 samples, 0.37%)</title><rect x="13.3639%" y="85" width="0.3685%" height="15" fill="rgb(211,81,21)" fg:x="213371" fg:w="5883"/><text x="13.6139%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4,871 samples, 0.31%)</title><rect x="13.4273%" y="69" width="0.3051%" height="15" fill="rgb(208,190,38)" fg:x="214383" fg:w="4871"/><text x="13.6773%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (921 samples, 0.06%)</title><rect x="13.6747%" y="53" width="0.0577%" height="15" fill="rgb(235,213,38)" fg:x="218333" fg:w="921"/><text x="13.9247%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26,418 samples, 1.65%)</title><rect x="13.7324%" y="101" width="1.6546%" height="15" fill="rgb(237,122,38)" fg:x="219254" fg:w="26418"/><text x="13.9824%" y="111.50"></text></g><g><title>__memcpy_avx_unaligned_erms (23,433 samples, 1.47%)</title><rect x="13.9193%" y="85" width="1.4677%" height="15" fill="rgb(244,218,35)" fg:x="222239" fg:w="23433"/><text x="14.1693%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (42,006 samples, 2.63%)</title><rect x="12.8237%" y="197" width="2.6309%" height="15" fill="rgb(240,68,47)" fg:x="204746" fg:w="42006"/><text x="13.0737%" y="207.50">&lt;&amp;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (34,875 samples, 2.18%)</title><rect x="13.2703%" y="181" width="2.1843%" height="15" fill="rgb(210,16,53)" fg:x="211877" fg:w="34875"/><text x="13.5203%" y="191.50">&lt;..</text></g><g><title>alloc::string::String::push_str (34,875 samples, 2.18%)</title><rect x="13.2703%" y="165" width="2.1843%" height="15" fill="rgb(235,124,12)" fg:x="211877" fg:w="34875"/><text x="13.5203%" y="175.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34,875 samples, 2.18%)</title><rect x="13.2703%" y="149" width="2.1843%" height="15" fill="rgb(224,169,11)" fg:x="211877" fg:w="34875"/><text x="13.5203%" y="159.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34,875 samples, 2.18%)</title><rect x="13.2703%" y="133" width="2.1843%" height="15" fill="rgb(250,166,2)" fg:x="211877" fg:w="34875"/><text x="13.5203%" y="143.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34,138 samples, 2.14%)</title><rect x="13.3165%" y="117" width="2.1381%" height="15" fill="rgb(242,216,29)" fg:x="212614" fg:w="34138"/><text x="13.5665%" y="127.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,080 samples, 0.07%)</title><rect x="15.3870%" y="101" width="0.0676%" height="15" fill="rgb(230,116,27)" fg:x="245672" fg:w="1080"/><text x="15.6370%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1,080 samples, 0.07%)</title><rect x="15.3870%" y="85" width="0.0676%" height="15" fill="rgb(228,99,48)" fg:x="245672" fg:w="1080"/><text x="15.6370%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,057 samples, 0.25%)</title><rect x="15.4546%" y="197" width="0.2541%" height="15" fill="rgb(253,11,6)" fg:x="246752" fg:w="4057"/><text x="15.7046%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,057 samples, 0.25%)</title><rect x="15.4546%" y="181" width="0.2541%" height="15" fill="rgb(247,143,39)" fg:x="246752" fg:w="4057"/><text x="15.7046%" y="191.50"></text></g><g><title>core::fmt::Formatter::new (4,360 samples, 0.27%)</title><rect x="15.7087%" y="197" width="0.2731%" height="15" fill="rgb(236,97,10)" fg:x="250809" fg:w="4360"/><text x="15.9587%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (3,398 samples, 0.21%)</title><rect x="16.0726%" y="181" width="0.2128%" height="15" fill="rgb(233,208,19)" fg:x="256619" fg:w="3398"/><text x="16.3226%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,130 samples, 0.13%)</title><rect x="18.5605%" y="69" width="0.1334%" height="15" fill="rgb(216,164,2)" fg:x="296341" fg:w="2130"/><text x="18.8105%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,122 samples, 0.13%)</title><rect x="18.5610%" y="53" width="0.1329%" height="15" fill="rgb(220,129,5)" fg:x="296349" fg:w="2122"/><text x="18.8110%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2,012 samples, 0.13%)</title><rect x="18.5679%" y="37" width="0.1260%" height="15" fill="rgb(242,17,10)" fg:x="296459" fg:w="2012"/><text x="18.8179%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,654 samples, 0.54%)</title><rect x="18.6939%" y="69" width="0.5420%" height="15" fill="rgb(242,107,0)" fg:x="298471" fg:w="8654"/><text x="18.9439%" y="79.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6,774 samples, 0.42%)</title><rect x="18.8117%" y="53" width="0.4243%" height="15" fill="rgb(251,28,31)" fg:x="300351" fg:w="6774"/><text x="19.0617%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (14,887 samples, 0.93%)</title><rect x="18.3069%" y="165" width="0.9324%" height="15" fill="rgb(233,223,10)" fg:x="292292" fg:w="14887"/><text x="18.5569%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (12,931 samples, 0.81%)</title><rect x="18.4294%" y="149" width="0.8099%" height="15" fill="rgb(215,21,27)" fg:x="294248" fg:w="12931"/><text x="18.6794%" y="159.50"></text></g><g><title>alloc::string::String::push_str (12,931 samples, 0.81%)</title><rect x="18.4294%" y="133" width="0.8099%" height="15" fill="rgb(232,23,21)" fg:x="294248" fg:w="12931"/><text x="18.6794%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12,931 samples, 0.81%)</title><rect x="18.4294%" y="117" width="0.8099%" height="15" fill="rgb(244,5,23)" fg:x="294248" fg:w="12931"/><text x="18.6794%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12,931 samples, 0.81%)</title><rect x="18.4294%" y="101" width="0.8099%" height="15" fill="rgb(226,81,46)" fg:x="294248" fg:w="12931"/><text x="18.6794%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12,909 samples, 0.81%)</title><rect x="18.4308%" y="85" width="0.8085%" height="15" fill="rgb(247,70,30)" fg:x="294270" fg:w="12909"/><text x="18.6808%" y="95.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (4,063 samples, 0.25%)</title><rect x="20.1861%" y="149" width="0.2545%" height="15" fill="rgb(212,68,19)" fg:x="322296" fg:w="4063"/><text x="20.4361%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (22,393 samples, 1.40%)</title><rect x="19.2393%" y="165" width="1.4025%" height="15" fill="rgb(240,187,13)" fg:x="307179" fg:w="22393"/><text x="19.4893%" y="175.50"></text></g><g><title>core::fmt::Formatter::sign_plus (3,213 samples, 0.20%)</title><rect x="20.4406%" y="149" width="0.2012%" height="15" fill="rgb(223,113,26)" fg:x="326359" fg:w="3213"/><text x="20.6906%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,069 samples, 0.88%)</title><rect x="20.6418%" y="165" width="0.8812%" height="15" fill="rgb(206,192,2)" fg:x="329572" fg:w="14069"/><text x="20.8918%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (90,123 samples, 5.64%)</title><rect x="15.9818%" y="197" width="5.6446%" height="15" fill="rgb(241,108,4)" fg:x="255169" fg:w="90123"/><text x="16.2318%" y="207.50">core::f..</text></g><g><title>core::fmt::num::imp::fmt_u64 (85,275 samples, 5.34%)</title><rect x="16.2854%" y="181" width="5.3410%" height="15" fill="rgb(247,173,49)" fg:x="260017" fg:w="85275"/><text x="16.5354%" y="191.50">core::f..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1,638 samples, 0.10%)</title><rect x="21.5238%" y="165" width="0.1026%" height="15" fill="rgb(224,114,35)" fg:x="343654" fg:w="1638"/><text x="21.7738%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4,783 samples, 0.30%)</title><rect x="21.6264%" y="197" width="0.2996%" height="15" fill="rgb(245,159,27)" fg:x="345292" fg:w="4783"/><text x="21.8764%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4,783 samples, 0.30%)</title><rect x="21.6264%" y="181" width="0.2996%" height="15" fill="rgb(245,172,44)" fg:x="345292" fg:w="4783"/><text x="21.8764%" y="191.50"></text></g><g><title>core::fmt::Write::write_fmt (163,073 samples, 10.21%)</title><rect x="11.7141%" y="229" width="10.2136%" height="15" fill="rgb(236,23,11)" fg:x="187030" fg:w="163073"/><text x="11.9641%" y="239.50">core::fmt::Writ..</text></g><g><title>core::fmt::write (158,985 samples, 9.96%)</title><rect x="11.9701%" y="213" width="9.9576%" height="15" fill="rgb(205,117,38)" fg:x="191118" fg:w="158985"/><text x="12.2201%" y="223.50">core::fmt::wri..</text></g><g><title>alloc::fmt::format (220,916 samples, 13.84%)</title><rect x="8.0918%" y="245" width="13.8365%" height="15" fill="rgb(237,72,25)" fg:x="129196" fg:w="220916"/><text x="8.3418%" y="255.50">alloc::fmt::format</text></g><g><title>core::fmt::Arguments::new_v1 (4,226 samples, 0.26%)</title><rect x="21.9283%" y="245" width="0.2647%" height="15" fill="rgb(244,70,9)" fg:x="350112" fg:w="4226"/><text x="22.1783%" y="255.50"></text></g><g><title>__free (34,921 samples, 2.19%)</title><rect x="22.3990%" y="149" width="2.1872%" height="15" fill="rgb(217,125,39)" fg:x="357627" fg:w="34921"/><text x="22.6490%" y="159.50">_..</text></g><g><title>_int_free (24,268 samples, 1.52%)</title><rect x="23.0662%" y="133" width="1.5200%" height="15" fill="rgb(235,36,10)" fg:x="368280" fg:w="24268"/><text x="23.3162%" y="143.50"></text></g><g><title>__rdl_dealloc (2,231 samples, 0.14%)</title><rect x="24.5862%" y="149" width="0.1397%" height="15" fill="rgb(251,123,47)" fg:x="392548" fg:w="2231"/><text x="24.8362%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,231 samples, 0.14%)</title><rect x="24.5862%" y="133" width="0.1397%" height="15" fill="rgb(221,13,13)" fg:x="392548" fg:w="2231"/><text x="24.8362%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (41,457 samples, 2.60%)</title><rect x="22.2555%" y="165" width="2.5965%" height="15" fill="rgb(238,131,9)" fg:x="355337" fg:w="41457"/><text x="22.5055%" y="175.50">al..</text></g><g><title>__rust_dealloc (2,015 samples, 0.13%)</title><rect x="24.7259%" y="149" width="0.1262%" height="15" fill="rgb(211,50,8)" fg:x="394779" fg:w="2015"/><text x="24.9759%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43,458 samples, 2.72%)</title><rect x="22.2555%" y="181" width="2.7219%" height="15" fill="rgb(245,182,24)" fg:x="355337" fg:w="43458"/><text x="22.5055%" y="191.50">&lt;a..</text></g><g><title>rust_set_reconciliation::main (2,001 samples, 0.13%)</title><rect x="24.8521%" y="165" width="0.1253%" height="15" fill="rgb(242,14,37)" fg:x="396794" fg:w="2001"/><text x="25.1021%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (45,291 samples, 2.84%)</title><rect x="22.1939%" y="245" width="2.8367%" height="15" fill="rgb(246,228,12)" fg:x="354353" fg:w="45291"/><text x="22.4439%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (45,291 samples, 2.84%)</title><rect x="22.1939%" y="229" width="2.8367%" height="15" fill="rgb(213,55,15)" fg:x="354353" fg:w="45291"/><text x="22.4439%" y="239.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (45,291 samples, 2.84%)</title><rect x="22.1939%" y="213" width="2.8367%" height="15" fill="rgb(209,9,3)" fg:x="354353" fg:w="45291"/><text x="22.4439%" y="223.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45,291 samples, 2.84%)</title><rect x="22.1939%" y="197" width="2.8367%" height="15" fill="rgb(230,59,30)" fg:x="354353" fg:w="45291"/><text x="22.4439%" y="207.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (849 samples, 0.05%)</title><rect x="24.9774%" y="181" width="0.0532%" height="15" fill="rgb(209,121,21)" fg:x="398795" fg:w="849"/><text x="25.2274%" y="191.50"></text></g><g><title>rust_set_reconciliation::main (1,891 samples, 0.12%)</title><rect x="25.0306%" y="245" width="0.1184%" height="15" fill="rgb(220,109,13)" fg:x="399644" fg:w="1891"/><text x="25.2806%" y="255.50"></text></g><g><title>&lt;&amp;T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (2,069 samples, 0.13%)</title><rect x="25.2764%" y="229" width="0.1296%" height="15" fill="rgb(232,18,1)" fg:x="403568" fg:w="2069"/><text x="25.5264%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (2,069 samples, 0.13%)</title><rect x="25.2764%" y="213" width="0.1296%" height="15" fill="rgb(215,41,42)" fg:x="403568" fg:w="2069"/><text x="25.5264%" y="223.50"></text></g><g><title>alloc::string::String::as_bytes (2,069 samples, 0.13%)</title><rect x="25.2764%" y="197" width="0.1296%" height="15" fill="rgb(224,123,36)" fg:x="403568" fg:w="2069"/><text x="25.5264%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,069 samples, 0.13%)</title><rect x="25.2764%" y="181" width="0.1296%" height="15" fill="rgb(240,125,3)" fg:x="403568" fg:w="2069"/><text x="25.5264%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2,056 samples, 0.13%)</title><rect x="25.2772%" y="165" width="0.1288%" height="15" fill="rgb(205,98,50)" fg:x="403581" fg:w="2056"/><text x="25.5272%" y="175.50"></text></g><g><title>blake3::platform::Platform::compress_in_place (6,355 samples, 0.40%)</title><rect x="25.9426%" y="197" width="0.3980%" height="15" fill="rgb(205,185,37)" fg:x="414206" fg:w="6355"/><text x="26.1926%" y="207.50"></text></g><g><title>blake3::sse41::compress_in_place (4,086 samples, 0.26%)</title><rect x="26.0848%" y="181" width="0.2559%" height="15" fill="rgb(238,207,15)" fg:x="416475" fg:w="4086"/><text x="26.3348%" y="191.50"></text></g><g><title>blake3::Output::root_hash (12,965 samples, 0.81%)</title><rect x="25.5337%" y="213" width="0.8120%" height="15" fill="rgb(213,199,42)" fg:x="407677" fg:w="12965"/><text x="25.7837%" y="223.50"></text></g><g><title>blake3::ChunkState::new (7,270 samples, 0.46%)</title><rect x="26.4606%" y="197" width="0.4553%" height="15" fill="rgb(235,201,11)" fg:x="422475" fg:w="7270"/><text x="26.7106%" y="207.50"></text></g><g><title>blake3::ChunkState::output (53,137 samples, 3.33%)</title><rect x="26.9159%" y="197" width="3.3281%" height="15" fill="rgb(207,46,11)" fg:x="429745" fg:w="53137"/><text x="27.1659%" y="207.50">bla..</text></g><g><title>blake3::ChunkState::start_flag (2,041 samples, 0.13%)</title><rect x="30.1161%" y="181" width="0.1278%" height="15" fill="rgb(241,35,35)" fg:x="480841" fg:w="2041"/><text x="30.3661%" y="191.50"></text></g><g><title>core::cmp::min (2,011 samples, 0.13%)</title><rect x="30.6287%" y="165" width="0.1260%" height="15" fill="rgb(243,32,47)" fg:x="489024" fg:w="2011"/><text x="30.8787%" y="175.50"></text></g><g><title>core::cmp::Ord::min (2,011 samples, 0.13%)</title><rect x="30.6287%" y="149" width="0.1260%" height="15" fill="rgb(247,202,23)" fg:x="489024" fg:w="2011"/><text x="30.8787%" y="159.50"></text></g><g><title>blake3::ChunkState::update (2,011 samples, 0.13%)</title><rect x="30.6287%" y="133" width="0.1260%" height="15" fill="rgb(219,102,11)" fg:x="489024" fg:w="2011"/><text x="30.8787%" y="143.50"></text></g><g><title>blake3::ChunkState::update (17,734 samples, 1.11%)</title><rect x="30.2440%" y="197" width="1.1107%" height="15" fill="rgb(243,110,44)" fg:x="482882" fg:w="17734"/><text x="30.4940%" y="207.50"></text></g><g><title>blake3::ChunkState::fill_buf (11,628 samples, 0.73%)</title><rect x="30.6264%" y="181" width="0.7283%" height="15" fill="rgb(222,74,54)" fg:x="488988" fg:w="11628"/><text x="30.8764%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9,581 samples, 0.60%)</title><rect x="30.7546%" y="165" width="0.6001%" height="15" fill="rgb(216,99,12)" fg:x="491035" fg:w="9581"/><text x="31.0046%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,581 samples, 0.60%)</title><rect x="30.7546%" y="149" width="0.6001%" height="15" fill="rgb(226,22,26)" fg:x="491035" fg:w="9581"/><text x="31.0046%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7,652 samples, 0.48%)</title><rect x="30.8754%" y="133" width="0.4793%" height="15" fill="rgb(217,163,10)" fg:x="492964" fg:w="7652"/><text x="31.1254%" y="143.50"></text></g><g><title>blake3::hash (1,932 samples, 0.12%)</title><rect x="31.3585%" y="133" width="0.1210%" height="15" fill="rgb(213,25,53)" fg:x="500676" fg:w="1932"/><text x="31.6085%" y="143.50"></text></g><g><title>blake3::platform::avx2_detected (2,075 samples, 0.13%)</title><rect x="31.3585%" y="181" width="0.1300%" height="15" fill="rgb(252,105,26)" fg:x="500676" fg:w="2075"/><text x="31.6085%" y="191.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (2,075 samples, 0.13%)</title><rect x="31.3585%" y="165" width="0.1300%" height="15" fill="rgb(220,39,43)" fg:x="500676" fg:w="2075"/><text x="31.6085%" y="175.50"></text></g><g><title>std_detect::detect::check_for (2,075 samples, 0.13%)</title><rect x="31.3585%" y="149" width="0.1300%" height="15" fill="rgb(229,68,48)" fg:x="500676" fg:w="2075"/><text x="31.6085%" y="159.50"></text></g><g><title>blake3::hash (99,238 samples, 6.22%)</title><rect x="25.4060%" y="229" width="6.2155%" height="15" fill="rgb(252,8,32)" fg:x="405637" fg:w="99238"/><text x="25.6560%" y="239.50">blake3::..</text></g><g><title>blake3::hash_all_at_once (84,233 samples, 5.28%)</title><rect x="26.3457%" y="213" width="5.2757%" height="15" fill="rgb(223,20,43)" fg:x="420642" fg:w="84233"/><text x="26.5957%" y="223.50">blake3..</text></g><g><title>blake3::platform::Platform::detect (4,259 samples, 0.27%)</title><rect x="31.3547%" y="197" width="0.2668%" height="15" fill="rgb(229,81,49)" fg:x="500616" fg:w="4259"/><text x="31.6047%" y="207.50"></text></g><g><title>blake3::platform::avx512_detected (2,124 samples, 0.13%)</title><rect x="31.4884%" y="181" width="0.1330%" height="15" fill="rgb(236,28,36)" fg:x="502751" fg:w="2124"/><text x="31.7384%" y="191.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx512f (2,079 samples, 0.13%)</title><rect x="31.4912%" y="165" width="0.1302%" height="15" fill="rgb(249,185,26)" fg:x="502796" fg:w="2079"/><text x="31.7412%" y="175.50"></text></g><g><title>std_detect::detect::check_for (2,079 samples, 0.13%)</title><rect x="31.4912%" y="149" width="0.1302%" height="15" fill="rgb(249,174,33)" fg:x="502796" fg:w="2079"/><text x="31.7412%" y="159.50"></text></g><g><title>std_detect::detect::cache::test (2,078 samples, 0.13%)</title><rect x="31.4913%" y="133" width="0.1301%" height="15" fill="rgb(233,201,37)" fg:x="502797" fg:w="2078"/><text x="31.7413%" y="143.50"></text></g><g><title>std_detect::detect::cache::Cache::test (2,078 samples, 0.13%)</title><rect x="31.4913%" y="117" width="0.1301%" height="15" fill="rgb(221,78,26)" fg:x="502797" fg:w="2078"/><text x="31.7413%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (186 samples, 0.01%)</title><rect x="31.6098%" y="101" width="0.0116%" height="15" fill="rgb(250,127,30)" fg:x="504689" fg:w="186"/><text x="31.8598%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (186 samples, 0.01%)</title><rect x="31.6098%" y="85" width="0.0116%" height="15" fill="rgb(230,49,44)" fg:x="504689" fg:w="186"/><text x="31.8598%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,770 samples, 0.36%)</title><rect x="41.9042%" y="133" width="0.3614%" height="15" fill="rgb(229,67,23)" fg:x="669051" fg:w="5770"/><text x="42.1542%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,744 samples, 0.30%)</title><rect x="42.2655%" y="133" width="0.2971%" height="15" fill="rgb(249,83,47)" fg:x="674821" fg:w="4744"/><text x="42.5155%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9,224 samples, 0.58%)</title><rect x="43.7789%" y="117" width="0.5777%" height="15" fill="rgb(215,43,3)" fg:x="698984" fg:w="9224"/><text x="44.0289%" y="127.50"></text></g><g><title>xxhash_rust::xxh3::read_64le_unaligned (9,143 samples, 0.57%)</title><rect x="44.3650%" y="117" width="0.5726%" height="15" fill="rgb(238,154,13)" fg:x="708342" fg:w="9143"/><text x="44.6150%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,143 samples, 0.57%)</title><rect x="44.3650%" y="101" width="0.5726%" height="15" fill="rgb(219,56,2)" fg:x="708342" fg:w="9143"/><text x="44.6150%" y="111.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64_7to128 (84,755 samples, 5.31%)</title><rect x="41.5892%" y="149" width="5.3084%" height="15" fill="rgb(233,0,4)" fg:x="664022" fg:w="84755"/><text x="41.8392%" y="159.50">xxhash..</text></g><g><title>xxhash_rust::xxh3::mix16_b (69,212 samples, 4.33%)</title><rect x="42.5627%" y="133" width="4.3349%" height="15" fill="rgb(235,30,7)" fg:x="679565" fg:w="69212"/><text x="42.8127%" y="143.50">xxhas..</text></g><g><title>xxhash_rust::xxh3_common::mul128_fold64 (31,292 samples, 1.96%)</title><rect x="44.9377%" y="117" width="1.9599%" height="15" fill="rgb(250,79,13)" fg:x="717485" fg:w="31292"/><text x="45.1877%" y="127.50">x..</text></g><g><title>xxhash_rust::xxh3_common::mul64_to128 (20,836 samples, 1.31%)</title><rect x="45.5926%" y="101" width="1.3050%" height="15" fill="rgb(211,146,34)" fg:x="727941" fg:w="20836"/><text x="45.8426%" y="111.50"></text></g><g><title>rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash (206,601 samples, 12.94%)</title><rect x="34.0080%" y="181" width="12.9399%" height="15" fill="rgb(228,22,38)" fg:x="542980" fg:w="206601"/><text x="34.2580%" y="191.50">rust_set_reconcilia..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (131,872 samples, 8.26%)</title><rect x="38.6885%" y="165" width="8.2594%" height="15" fill="rgb(235,168,5)" fg:x="617709" fg:w="131872"/><text x="38.9385%" y="175.50">xxhash_rust..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (804 samples, 0.05%)</title><rect x="46.8976%" y="149" width="0.0504%" height="15" fill="rgb(221,155,16)" fg:x="748777" fg:w="804"/><text x="47.1476%" y="159.50"></text></g><g><title>[rust-set-reconciliation] (4,476 samples, 0.28%)</title><rect x="55.4920%" y="149" width="0.2803%" height="15" fill="rgb(215,215,53)" fg:x="885998" fg:w="4476"/><text x="55.7420%" y="159.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (4,476 samples, 0.28%)</title><rect x="55.4920%" y="133" width="0.2803%" height="15" fill="rgb(223,4,10)" fg:x="885998" fg:w="4476"/><text x="55.7420%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,713 samples, 0.36%)</title><rect x="58.2831%" y="117" width="0.3578%" height="15" fill="rgb(234,103,6)" fg:x="930561" fg:w="5713"/><text x="58.5331%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (10,623 samples, 0.67%)</title><rect x="58.6409%" y="117" width="0.6653%" height="15" fill="rgb(227,97,0)" fg:x="936274" fg:w="10623"/><text x="58.8909%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,487 samples, 0.28%)</title><rect x="60.1234%" y="101" width="0.2810%" height="15" fill="rgb(234,150,53)" fg:x="959943" fg:w="4487"/><text x="60.3734%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1,311 samples, 0.08%)</title><rect x="60.4044%" y="101" width="0.0821%" height="15" fill="rgb(228,201,54)" fg:x="964430" fg:w="1311"/><text x="60.6544%" y="111.50"></text></g><g><title>xxhash_rust::xxh3::read_64le_unaligned (469 samples, 0.03%)</title><rect x="60.4865%" y="101" width="0.0294%" height="15" fill="rgb(222,22,37)" fg:x="965741" fg:w="469"/><text x="60.7365%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (469 samples, 0.03%)</title><rect x="60.4865%" y="85" width="0.0294%" height="15" fill="rgb(237,53,32)" fg:x="965741" fg:w="469"/><text x="60.7365%" y="95.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64_7to128 (69,103 samples, 4.33%)</title><rect x="58.2492%" y="133" width="4.3281%" height="15" fill="rgb(233,25,53)" fg:x="930020" fg:w="69103"/><text x="58.4992%" y="143.50">xxhas..</text></g><g><title>xxhash_rust::xxh3::mix16_b (52,226 samples, 3.27%)</title><rect x="59.3063%" y="117" width="3.2710%" height="15" fill="rgb(210,40,34)" fg:x="946897" fg:w="52226"/><text x="59.5563%" y="127.50">xxh..</text></g><g><title>xxhash_rust::xxh3_common::mul128_fold64 (32,913 samples, 2.06%)</title><rect x="60.5159%" y="101" width="2.0614%" height="15" fill="rgb(241,220,44)" fg:x="966210" fg:w="32913"/><text x="60.7659%" y="111.50">x..</text></g><g><title>xxhash_rust::xxh3_common::mul64_to128 (20,021 samples, 1.25%)</title><rect x="61.3233%" y="85" width="1.2540%" height="15" fill="rgb(235,28,35)" fg:x="979102" fg:w="20021"/><text x="61.5733%" y="95.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (470,877 samples, 29.49%)</title><rect x="34.0080%" y="197" width="29.4921%" height="15" fill="rgb(210,56,17)" fg:x="542980" fg:w="470877"/><text x="34.2580%" y="207.50">&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as cor..</text></g><g><title>rust_set_reconciliation::ibf::distinct_hashes_in_range::{{closure}} (264,276 samples, 16.55%)</title><rect x="46.9479%" y="181" width="16.5522%" height="15" fill="rgb(224,130,29)" fg:x="749581" fg:w="264276"/><text x="47.1979%" y="191.50">rust_set_reconciliation::i..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_with_seed (140,513 samples, 8.80%)</title><rect x="54.6995%" y="165" width="8.8006%" height="15" fill="rgb(235,212,8)" fg:x="873344" fg:w="140513"/><text x="54.9495%" y="175.50">xxhash_rust:..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (123,383 samples, 7.73%)</title><rect x="55.7724%" y="149" width="7.7278%" height="15" fill="rgb(223,33,50)" fg:x="890474" fg:w="123383"/><text x="56.0224%" y="159.50">xxhash_rust..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (14,734 samples, 0.92%)</title><rect x="62.5773%" y="133" width="0.9228%" height="15" fill="rgb(219,149,13)" fg:x="999123" fg:w="14734"/><text x="62.8273%" y="143.50"></text></g><g><title>&lt;rust_set_reconciliation::ibf::Cell as core::ops::arith::AddAssign&gt;::add_assign (43,528 samples, 2.73%)</title><rect x="63.5001%" y="197" width="2.7263%" height="15" fill="rgb(250,156,29)" fg:x="1013857" fg:w="43528"/><text x="63.7501%" y="207.50">&lt;r..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6,751 samples, 0.42%)</title><rect x="69.5675%" y="133" width="0.4228%" height="15" fill="rgb(216,193,19)" fg:x="1110730" fg:w="6751"/><text x="69.8175%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,542 samples, 0.22%)</title><rect x="70.7702%" y="117" width="0.2218%" height="15" fill="rgb(216,135,14)" fg:x="1129933" fg:w="3542"/><text x="71.0202%" y="127.50"></text></g><g><title>xxhash_rust::xxh3::read_64le_unaligned (6,766 samples, 0.42%)</title><rect x="70.9948%" y="117" width="0.4238%" height="15" fill="rgb(241,47,5)" fg:x="1133518" fg:w="6766"/><text x="71.2448%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,766 samples, 0.42%)</title><rect x="70.9948%" y="101" width="0.4238%" height="15" fill="rgb(233,42,35)" fg:x="1133518" fg:w="6766"/><text x="71.2448%" y="111.50"></text></g><g><title>xxhash_rust::xxh3::xxh3_64_7to128 (55,468 samples, 3.47%)</title><rect x="69.2171%" y="149" width="3.4741%" height="15" fill="rgb(231,13,6)" fg:x="1105136" fg:w="55468"/><text x="69.4671%" y="159.50">xxh..</text></g><g><title>xxhash_rust::xxh3::mix16_b (43,063 samples, 2.70%)</title><rect x="69.9941%" y="133" width="2.6971%" height="15" fill="rgb(207,181,40)" fg:x="1117541" fg:w="43063"/><text x="70.2441%" y="143.50">xx..</text></g><g><title>xxhash_rust::xxh3_common::mul128_fold64 (20,320 samples, 1.27%)</title><rect x="71.4185%" y="117" width="1.2727%" height="15" fill="rgb(254,173,49)" fg:x="1140284" fg:w="20320"/><text x="71.6685%" y="127.50"></text></g><g><title>xxhash_rust::xxh3_common::mul64_to128 (11,796 samples, 0.74%)</title><rect x="71.9524%" y="101" width="0.7388%" height="15" fill="rgb(221,1,38)" fg:x="1148808" fg:w="11796"/><text x="72.2024%" y="111.50"></text></g><g><title>rust_set_reconciliation::ibf::Cell::new (103,350 samples, 6.47%)</title><rect x="66.2264%" y="197" width="6.4730%" height="15" fill="rgb(206,124,46)" fg:x="1057385" fg:w="103350"/><text x="66.4764%" y="207.50">rust_set..</text></g><g><title>xxhash_rust::xxh3::xxh3_64 (99,337 samples, 6.22%)</title><rect x="66.4777%" y="181" width="6.2217%" height="15" fill="rgb(249,21,11)" fg:x="1061398" fg:w="99337"/><text x="66.7277%" y="191.50">xxhash_r..</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (91,270 samples, 5.72%)</title><rect x="66.9830%" y="165" width="5.7164%" height="15" fill="rgb(222,201,40)" fg:x="1069465" fg:w="91270"/><text x="67.2330%" y="175.50">xxhash_..</text></g><g><title>rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash (655,505 samples, 41.06%)</title><rect x="31.8482%" y="213" width="41.0557%" height="15" fill="rgb(235,61,29)" fg:x="508496" fg:w="655505"/><text x="32.0982%" y="223.50">rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash</text></g><g><title>rust_set_reconciliation::ibf::IBF&lt;_,_&gt;::insert_hash (3,266 samples, 0.20%)</title><rect x="72.6994%" y="197" width="0.2046%" height="15" fill="rgb(219,207,3)" fg:x="1160735" fg:w="3266"/><text x="72.9494%" y="207.50"></text></g><g><title>core::cmp::min_by (6,055 samples, 0.38%)</title><rect x="72.9045%" y="165" width="0.3792%" height="15" fill="rgb(222,56,46)" fg:x="1164009" fg:w="6055"/><text x="73.1545%" y="175.50"></text></g><g><title>core::cmp::min (9,944 samples, 0.62%)</title><rect x="72.9045%" y="197" width="0.6228%" height="15" fill="rgb(239,76,54)" fg:x="1164009" fg:w="9944"/><text x="73.1545%" y="207.50"></text></g><g><title>core::cmp::Ord::min (9,944 samples, 0.62%)</title><rect x="72.9045%" y="181" width="0.6228%" height="15" fill="rgb(231,124,27)" fg:x="1164009" fg:w="9944"/><text x="73.1545%" y="191.50"></text></g><g><title>rust_set_reconciliation::main (3,889 samples, 0.24%)</title><rect x="73.2837%" y="165" width="0.2436%" height="15" fill="rgb(249,195,6)" fg:x="1170064" fg:w="3889"/><text x="73.5337%" y="175.50"></text></g><g><title>rust_set_reconciliation::test_estimator (1,059,934 samples, 66.39%)</title><rect x="7.8250%" y="261" width="66.3860%" height="15" fill="rgb(237,174,47)" fg:x="124936" fg:w="1059934"/><text x="8.0750%" y="271.50">rust_set_reconciliation::test_estimator</text></g><g><title>rust_set_reconciliation::strata_estimator::Estimator&lt;_&gt;::insert (783,333 samples, 49.06%)</title><rect x="25.1492%" y="245" width="49.0619%" height="15" fill="rgb(206,201,31)" fg:x="401537" fg:w="783333"/><text x="25.3992%" y="255.50">rust_set_reconciliation::strata_estimator::Estimator&lt;_&gt;::insert</text></g><g><title>rust_set_reconciliation::strata_estimator::Estimator&lt;_&gt;::insert_hash (679,995 samples, 42.59%)</title><rect x="31.6214%" y="229" width="42.5896%" height="15" fill="rgb(231,57,52)" fg:x="504875" fg:w="679995"/><text x="31.8714%" y="239.50">rust_set_reconciliation::strata_estimator::Estimator&lt;_&gt;::insert_hash</text></g><g><title>rust_set_reconciliation::strata_estimator::Estimator&lt;_&gt;::bucket_for_hash (20,869 samples, 1.31%)</title><rect x="72.9040%" y="213" width="1.3071%" height="15" fill="rgb(248,177,22)" fg:x="1164001" fg:w="20869"/><text x="73.1540%" y="223.50"></text></g><g><title>rust_set_reconciliation::strata_estimator::leading_zeros (10,773 samples, 0.67%)</title><rect x="73.5363%" y="197" width="0.6747%" height="15" fill="rgb(215,211,37)" fg:x="1174097" fg:w="10773"/><text x="73.7863%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::leading_zeros (8,325 samples, 0.52%)</title><rect x="73.6896%" y="181" width="0.5214%" height="15" fill="rgb(241,128,51)" fg:x="1176545" fg:w="8325"/><text x="73.9396%" y="191.50"></text></g><g><title>rust_set_reconciliation::main (1,059,938 samples, 66.39%)</title><rect x="7.8250%" y="293" width="66.3863%" height="15" fill="rgb(227,165,31)" fg:x="124936" fg:w="1059938"/><text x="8.0750%" y="303.50">rust_set_reconciliation::main</text></g><g><title>rust_set_reconciliation::test_many_estimations (1,059,938 samples, 66.39%)</title><rect x="7.8250%" y="277" width="66.3863%" height="15" fill="rgb(228,167,24)" fg:x="124936" fg:w="1059938"/><text x="8.0750%" y="287.50">rust_set_reconciliation::test_many_estimations</text></g><g><title>[unknown] (1,133,787 samples, 71.01%)</title><rect x="3.6103%" y="309" width="71.0116%" height="15" fill="rgb(228,143,12)" fg:x="57643" fg:w="1133787"/><text x="3.8603%" y="319.50">[unknown]</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (6,556 samples, 0.41%)</title><rect x="74.2113%" y="293" width="0.4106%" height="15" fill="rgb(249,149,8)" fg:x="1184874" fg:w="6556"/><text x="74.4613%" y="303.50"></text></g><g><title>blake3::ChunkState::update (1,975 samples, 0.12%)</title><rect x="74.6263%" y="309" width="0.1237%" height="15" fill="rgb(243,35,44)" fg:x="1191500" fg:w="1975"/><text x="74.8763%" y="319.50"></text></g><g><title>blake3_compress_in_place_sse41 (402,810 samples, 25.23%)</title><rect x="74.7500%" y="309" width="25.2289%" height="15" fill="rgb(246,89,9)" fg:x="1193475" fg:w="402810"/><text x="75.0000%" y="319.50">blake3_compress_in_place_sse41</text></g><g><title>all (1,596,622 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="1596622"/><text x="0.2500%" y="351.50"></text></g><g><title>rust-set-reconc (1,596,622 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="1596622"/><text x="0.2500%" y="335.50">rust-set-reconc</text></g><g><title>xxhash_rust::xxh3::xxh3_64_internal (260 samples, 0.02%)</title><rect x="99.9837%" y="309" width="0.0163%" height="15" fill="rgb(239,167,4)" fg:x="1596362" fg:w="260"/><text x="100.2337%" y="319.50"></text></g></svg></svg>